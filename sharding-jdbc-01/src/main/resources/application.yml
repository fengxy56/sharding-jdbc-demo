swagger:
  enable: true

spring:
  main:
    allow-bean-definition-overriding: true
  shardingsphere:
    props:
      sql.show: true # 是否开启SQL显示
    datasource:
      druid:

        #最大连接数
        maxPoolSize: 3000
        filters: stat,wall
        initialSize: 10
        minIdle: 10
        maxActive: 300
        maxWait: 60000
        timeBetweenEvictionRunsMillis: 60000
        minEvictableIdleTimeMillis: 300000
        validationQuery: select 'x'
        testWhileIdle: true
        testOnBorrow: false
        testOnReturn: false
        poolPreparedStatements: false
        maxPoolPreparedStatementPerConnectionSize: 0
        removeAbandoned: true
        removeAbandonedTimeoutMillis: 20000
        logAbandoned: true
        logDifferentThread: true
        connectionProperties:  druid.stat.mergeSql=true;druid.stat.logSlowSql=true;druid.stat.slowSqlMillis=3000
        useGlobalDataSourceStat: true

      names: ds # 指定数据源名字，多数据源以逗号分隔
      ds:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://10.65.24.184:3306/mapproval?characterEncoding=utf-8&useSSL=false
        username: appadmin
        password: HongKunvm@2018

    #规则
    sharding:
      default-data-source-name: ds # 默认数据源
     # 广播表,不需要分库分表
      broadcastTables:
        - hongkun_pushinfo
        - hongkun_outsupportinfo
      # 设置绑定表
      #binding-tables: t_order,t_order_item
      #binding-tables[0]: t_order,t_order_item
      tables:
        hk_push:
          # 实际的数据节点(数据源名.逻辑表名)
          actual-data-nodes: ds.hk_push_$->{1..5}
          key-generator.column: id
          key-generator.type: SNOWFLAKE
          table-strategy:
            standard:
              sharding-column: user_id
              precise-algorithm-class-name: com.fxy.algorithm.HxPushShardingAlgorithm
        hk_push_split_algorithm:
          # 实际的数据节点(数据源名.逻辑表名)
          actual-data-nodes: ds.hk_push_split_algorithm_$->{1..5}
          key-generator.column: id
          key-generator.type: SNOWFLAKE
          table-strategy:
            standard:
              sharding-column: app_request_id
              precise-algorithm-class-name: com.fxy.algorithm.HxPushShardingAlgorithm
        t_order:
          # 实际的数据节点(数据源名.逻辑表名)
          actual-data-nodes: ds.t_order_$->{1..2}
          key-generator.column: id
          key-generator.type: SNOWFLAKE
          table-strategy:
            inline:
              sharding-column: id
              algorithm-expression: t_order_$->{id % 2 + 1}
#        t_order:
#          # 实际的数据节点(数据源名.逻辑表名)
#          actual-data-nodes: ds.t_order$->{1..3}
#          key-generator.column: order_id
#          key-generator.type: SNOWFLAKE
#          table-strategy:
#            inline:
#              sharding-column: order_id
#              algorithm-expression: t_order$->{order_id % 3 + 1}
#        t_order_item:
#          actual-data-nodes: ds.t_order_item$->{1..3}
#          key-generator.column: order_item_id
#          key-generator.type: SNOWFLAKE
#          table-strategy:
#            inline:
#              sharding-column: order_id
#              algorithm-expression: t_order_item$->{order_id % 3 + 1}
